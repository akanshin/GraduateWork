Глава 1. Постановка задачи

1.1 TANGO

Для создания новой системы диагностики пучка в БЭП на основе программной среды TANGO, необходимо изучить принципы разработки программ с использованием TANGO, а также изучить API для камер Chameleon под названием FlyCapture2.

TANGO - свобоная, объектно-ориентированная, с открытым исходным кодом программная среда, предназначенная для распределенного управления устройствами, различным оборудованием и программным обеспечением. По сути TANGO - трехуровневая система драйвер-сервер-клиент, способная работать в рамках локальной сети. Под драйверами подразумевается программы, являющиеся серверами устройств, каждый из которых работает с одним сервером на одной машине. Все экземпляры серверов устройств регистрируются в базе данных, находящейся на какой-либо машине в рамках этой локальной сети. Серверов, к которым подключаются сервера устройств, может быть огромное множество, по одному серверу на компьютер с устройствами. Клиентские программы могут унифицированным образом доступаться до каждого устройства, работающего в данной системе. В качестве сетевого протокола используется omniORB реализация CORBA. От разработчика программ на базе TANGO требуется реализовать сервер устройства и клиентскую программу, но для общих целей в TANGO уже присутствует универсальная клиентская программа под названием AtkPanel, которая автоматически генерирует интерфейс, исходя из настроек устройства, то есть из его атрибут, свойств и методов. Взаимодействие с устройством происходит непосредственно через атрибуты и методы. Атрибуты могут иметь три уровня доступа: только чтение, только запись, запись и чтение. А методы позволяют управлять состояниями устройств, например физическое включение и выключение устройства.

На момент начала выполнения данной работы последней версией TANGO являлась версия 9.2.5, которая поставлялась только в виде исходного кода. Поэтому пришлось собирать и настраивать TANGO вручную. Задача установки TANGO из исходников оказалась непростой и затратратила приличное количество времени.

Для изучения TANGO было решено создать симулятор генератора синусоидального сигнала с шумом с возможностью регулировать параметры сигнала, такие как амплитуда, частота, уровень шума, шаг дискретизации и размер буффера. В качестве атрибутов для чтения и записи возьмем все ранее перечисленные параметры сигнала, а в качестве атрибута только чтения создадим массив данных, содержащий синусоидальный сигнал.

В TANGO есть инструмент быстрого генерирования исходного кода серверов устройств, называемый POGO. При помощи POGO создадим сервер устройства (далее будем называть device-класс) под названием SinNoise, добавим в него атрибуты amplitude, frequency, noise, bufferSize и data (см. рис). Как было сказано ранее: amplitude, frequency, noise, step, bufferSize - атрибуты для чтения и записи, data - только для чтения. Причем, amplitude, frequency, noise, step - являются скалярами типа DevDouble (double), bufferSize - скаляр типа DevLong (int), а data - спектр типа DevDouble (одномерный массив double). Результатом генерации кода device-класса стал набор из двух классов: SinNoise и SinNoiseClass. Класс SinNoise является основным, он выполняет работу непосредственно с устройством, то есть читает и записывает в него данные. Чтение и запись данных инициализируется запросом из клиентской части. Класс SinNoiseClass является классом, описывающим наш device-класc, описывает методы, атрибуты и свойства для того, чтобы клиент мог знать какие есть атрибуты и т.д.. Разработчику необходимо работать только с классом SinNoise. Также среди сгенерированных файлов есть такие файлы, как ClassLoader.cpp, SinNoiseStateMachine.cpp, main.cpp и  Makefile. То есть это полноценная программа, которую уже можно компилировать и запускать. 

Чтобы этот device-класс стал работать как генератор синусоидального сигнала с шумом, необходимо создать функцию getSinNoise(double *data, int size, double amplitude, double frequency, double noise, double step) в отдельных файлах mysinnoise.h и mysinnoise.cpp.

#include <math.h>
#include <time.h>

void getSinNoise(double *data, int size, double amplitude, double frequency, double noise, double step) {
	srand(time(NULL));
	if (data != NULL && size > 0) {
		for (int i = 0; i < size; i++) {
			data[i] = (double) (rand() % (int)(noise * 1000)) / 1000.0
				      + amplitude * sin(i * step / 1000.0 * frequency);
		}
	}
}

В классе SinNoise есть специальные функции для работы с атрибутами, например, атрибут amplitude в классе задается как attr_amplitude_read, и к нему прилагается две функции: read_amplitude() и write_amplitude(), содержимое которых необходимо реализовывать самому. Все функции для работы с атрибутами параметров реализуются очень просто, достаточно читать и присваивать значения соответствующим полям класса. А в функции read_data() необходимо вызвать нашу функцию, генерирующую сигнал. Также в функции write_bufferSize() необходимо реализовать изменение размера массива данных.

После реализации всех этих функций, необходимо скомпилировать программу и зарегистрировать device-class в базе данных под именем, например, test/SinNoise/dev1. Запустим device-класс и попробуем поуправлять параметрами через программу AtkPanel, автоматически генерирующую клиентский интерфейс. Результат запуска симулятора генератора представлен на рис.

Таким образом было изучено как работать с TANGO, как создавать device-классы, как их запускать и  как с ними работать.

2.2 Chameleon


